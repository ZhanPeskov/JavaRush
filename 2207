import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.LinkedList;
import java.util.List;

/* 
Обращенные слова и Палиндромы
*/

public class Solution {
    public static List<Pair> result = new LinkedList<>();

    public static void main(String[] args) throws IOException {
        try (BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
             BufferedReader br = new BufferedReader(new FileReader(reader.readLine()/*, Charset.forName("windows-1251")*//*, StandardCharsets.UTF_8*/))) {
            String line;

            while ((line = br.readLine()) != null) {
                for (String word : line.split("\\s+")) {
                    String reverseWord = new StringBuilder(word).reverse().toString();

                    compareBlock:
                    {
                        for (Pair pair : result) {
                            if (pair.first.equals(reverseWord) && pair.second == null) {
                                pair.second = word;

                                break compareBlock;
                            }

//                            если мы хотим чтобы пары слов перевертышей были уникальными
//                            if (pair.first.equals(reverseWord)) {
//                                if (pair.second == null) {
//                                    pair.second = word;
//                                }
//
//                                break compareBlock;
//                            } else if (pair.first.equals(word)) {
//                                break compareBlock;
//                            }
                        }

                        Pair newPair = new Pair();
                        newPair.first = word;

//                        если мы хотим чтобы каждое слово палиндром создавало пару с самим собой
//                        if (word.equals(reverseWord)) {
//                            newPair.second = reverseWord;
//                        }

                        result.add(newPair);
                    }
                }
            }

            for (int i = result.size() - 1; i >= 0; --i) {
                if (result.get(i).second == null) {
                    result.remove(i);
                }
            }
        }
    }

    public static class Pair {
        String first;
        String second;

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            Pair pair = (Pair) o;

            if (first != null ? !first.equals(pair.first) : pair.first != null) return false;
            return second != null ? second.equals(pair.second) : pair.second == null;

        }

        @Override
        public int hashCode() {
            int result = first != null ? first.hashCode() : 0;
            result = 31 * result + (second != null ? second.hashCode() : 0);
            return result;
        }

        @Override
        public String toString() {
            return first == null && second == null ? "" :
                    first == null ? second :
                            second == null ? first :
                                    first.compareTo(second) < 0 ? first + " " + second : second + " " + first;

        }
    }

}
